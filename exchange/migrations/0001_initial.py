# Generated by Django 4.2.3 on 2023-07-29 18:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Acteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('speudo', models.CharField(max_length=10, null=True, unique=True)),
                ('satut', models.CharField(choices=[('ADMINISTRATEUR', 'Administrateur'), ('CREATOR', 'Créateur'), ('USER', 'Abonné')], max_length=30, verbose_name='Rôle')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Communauty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('categorie', models.CharField(choices=[('HealthCenter', 'Health Center'), ('CommercialCenter', 'Commercial Center'), ('AutoriteVillage', 'Autorite Village'), ('WorkCommunity', 'Work Community')], max_length=20)),
                ('localisation', models.CharField(blank=True, choices=[('EntreVillage', 'Entre du Village'), ('SortieVillage', 'Sortie du Village'), ('ArbePalabre', 'Arbe Palabre'), ('CentreVillage', 'Centre du Village')], max_length=20, null=True)),
                ('service', models.TextField(blank=True, max_length=2000, null=True)),
                ('membreID', models.ManyToManyField(blank=True, related_name='membre', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='joboffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True, max_length=2000, null=True)),
                ('nbreperson', models.IntegerField()),
                ('DiplomeRequirement', models.CharField(choices=[('M3eme', 'M3eme'), ('BEPC', 'BEPC'), ('BAC', 'BAC'), ('LICENCE', 'LICENCE'), ('MASTER', 'MASTER'), ('DOCTORAT', 'DOCTORAT'), ('Autre', 'Autre')], max_length=20)),
                ('dateAppelOffre', models.DateField(auto_now=True)),
                ('publieursID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publieurs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReferentielMetier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_name', models.CharField(choices=[('Mecanicien', 'Mecanicien'), ('maçon', 'maçon'), ('menusier', 'menusier'), ('plombier', 'plombier'), ('Autre', 'Autre')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('state', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True, max_length=2000, null=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('communityID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chef_projet', to='exchange.communauty')),
            ],
        ),
        migrations.CreateModel(
            name='Postulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offreID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='exchange.joboffer')),
                ('postulerID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='postuleur', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Habitant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50, null=True)),
                ('lastname', models.CharField(max_length=50, null=True)),
                ('nationality', models.CharField(choices=[('Ivorycoast', 'ivoirien'), ('Mali', 'malien'), ('BurkinaFaso', 'burkinabè'), ('Ghana', 'ghanaeen'), ('Benin', 'beninois'), ('Autre', 'autre')], max_length=20)),
                ('typepiece', models.CharField(choices=[('HH', 'Cartnationalidentity'), ('EN', 'Extraitnaissance'), ('AI', 'Attestationidentity'), ('CE', 'Carteetudiant'), ('Autre', 'Autre')], max_length=20)),
                ('piece_number', models.CharField(max_length=20, null=True)),
                ('marital_status', models.CharField(choices=[('Marié', 'Marié'), ('Celibataire', 'Celibataire'), ('Divorcé', 'Divorcé')], max_length=20)),
                ('contact', models.CharField(max_length=50, null=True)),
                ('level_studies', models.CharField(choices=[('M3eme', 'M3eme'), ('BEPC', 'BEPC'), ('BAC', 'BAC'), ('LICENCE', 'LICENCE'), ('MASTER', 'MASTER'), ('DOCTORAT', 'DOCTORAT'), ('Autre', 'Autre')], max_length=20)),
                ('read_ability', models.BooleanField()),
                ('installation_date', models.DateField()),
                ('neighborhoodmove', models.DateField(blank=True, null=True)),
                ('birthdate', models.DateField()),
                ('deathdate', models.DateField(blank=True, null=True)),
                ('work_space', models.CharField(choices=[('EntreVillage', 'Entre du Village'), ('SortieVillage', 'Sortie du Village'), ('ArbePalabre', 'Arbe Palabre'), ('CentreVillage', 'Centre du Village')], max_length=20)),
                ('work_name', models.ManyToManyField(blank=True, related_name='travailleur', to='exchange.referentielmetier')),
            ],
        ),
        migrations.CreateModel(
            name='CarnetSante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_name', models.CharField(choices=[('Paludisme', 'Paludisme'), ('FièvreTyphoide', 'Fièvre Typhoide'), ('COVID19', 'COVID19'), ('Autre', 'Autre')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('acteurID', models.ManyToManyField(blank=True, related_name='patient', to='exchange.habitant')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objet', models.CharField(max_length=20)),
                ('publication', models.TextField(blank=True, max_length=2000, null=True)),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('acteurID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publieur', to=settings.AUTH_USER_MODEL)),
                ('communityID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='name_communauty', to='exchange.communauty')),
            ],
        ),
        migrations.AddField(
            model_name='acteur',
            name='HabitantID',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='utilisateur', to='exchange.habitant'),
        ),
        migrations.AddField(
            model_name='acteur',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='acteur',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
